<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>忆二十几年前的“大案”|我们该教什么给孩子？</title>
    <url>/2020/09/08/a-case-of-theft/</url>
    <content><![CDATA[<h2 id="盗窃案"><a href="#盗窃案" class="headerlink" title="盗窃案"></a>盗窃案</h2><p>&emsp;&emsp;这是一起20多年前的“盗窃案”。</p>
<p>&emsp;&emsp;那时我读小学一年级。</p>
<p>&emsp;&emsp;小学在村子的西边，很小，也极简陋。学校有一、二、三共三个年级，两个老师，加两间教室。一年级学生多，单独一个班，我就在这个班。二三年级学生少，合并在一起上课。</p>
<p>&emsp;&emsp;那时候的学校大多只有书桌，没有凳子。开学的时候我们每人扛一个自家的高凳子到学校去上课。</p>
<p>&emsp;&emsp;教室外边的院子里有一颗树，树上挂了一个不大的钟，有一块长条铁块系了绳子从顶上垂下来，拉动绳子铁块便敲击钟，铛铛作响。</p>
<a id="more"></a>

<p>&emsp;&emsp;下课敲钟，由我们的两个老师负责，打钟常不准时。有时候下课，我们会拉着老师和我们一起玩弹珠，老师要去敲钟的时候，我们便缠着老师再玩一会儿，便真的能多玩几分钟。</p>
<p>&emsp;&emsp;那天早上的第一节课，一年级上的是语文课，我们班主任的课。</p>
<p>&emsp;&emsp;语文老师在教室外边铛铛敲了几下钟，便快步走进了教室。</p>
<p>&emsp;&emsp;抬头望去，看到老师一脸的严肃。</p>
<p>&emsp;&emsp;“今天我们先讲几个故事“，老师对着台下的我们看了一圈，便开始讲了。</p>
<p>&emsp;&emsp;“古时候，有一个小孩子，母亲让他去山上砍柴。天有点热，他本对砍柴就不喜欢，但还是往山上去了。走到半路时，看到路边有一捆现成的柴火。他看四下无人，就背回家了。”</p>
<p>&emsp;&emsp;老师咳了一下嗓子，继续往下讲。</p>
<p>&emsp;&emsp;“母亲奇怪他这么就快回来了，便问他缘由。孩子说是路边捡的，母亲听了非常生气——你捡柴火还能捡到人家捆好的？母亲带着他又把木柴背回到了捡木柴的地方。果然，这柴火是人家暂时放那里的。柴火还给了人家。母亲还让这个孩子给人家磕头道歉。母亲让他保证以后不拿不是自己的东西，他答应了。”</p>
<p>&emsp;&emsp;“后来，这个人再也没有拿过别人东西。努力读书，最后成为了一个举世闻名的大作家。”</p>
<p>&emsp;&emsp;老师接着说，“这个孩子说是捡的，实际是偷。偷是错的，是不应该做的，别人的东西就是别人的。不要觉得东西小，你们就可以‘拿’。你今天可以拿一捆木柴，长大了可能会偷一座森林。今天你会偷一块砖，明天你可能会偷一堵墙——最后，变成坏人被警察抓进监狱。”</p>
<p>&emsp;&emsp;“犯了错误不要紧。改正了，仍然是好人。依旧可以做一番大事业，就像这个大作家一样。”</p>
<p>……</p>
<p>&emsp;&emsp;老师连续讲了几个类似的故事，我对第一个故事一直记到现在。后来我尝试查找过这个“大作家”是谁，并没有找到类似的人物，想来可能是老师的杜撰。</p>
<p>&emsp;&emsp;但是我一直记得。</p>
<p>&emsp;&emsp;讲了几个故事后，老师继续说道：</p>
<p>&emsp;&emsp;“今天我们班的同学纪xx丢了一支新铅笔，刚刚找过我。我不知道谁拿的。可能你不小心拿错了，也可能你特别喜欢这个铅笔。希望你能悄悄地还给她，或者还到我这里，我再还给纪同学。”</p>
<p>&emsp;&emsp;我读一年级那会儿，大家都比较穷，大部分人的书包是由装化肥的蛇皮袋子裁剪成的，大部分人没有铅笔盒，铅笔盒班里只有几个人会有。每个人都会有铅笔，但是大部分人的铅笔是组合式的——底下铅笔头，上边套一个坏掉的圆珠笔筒。一支铅笔对于一年级的我们的确是不大不小的一笔“财产”。</p>
<p>&emsp;&emsp;这节课，老师迟迟没有讲完他的故事，钟声也迟迟没有响起。</p>
<p>&emsp;&emsp;这一节课上了很久。</p>
<p>&emsp;&emsp;“铛铛”的钟声响起，终于下课了。教室里却很安静。</p>
<p>&emsp;&emsp;后来也不清楚是谁归还了铅笔，或者铅笔究竟有没有找到，记忆已经模糊了。</p>
<p>&emsp;&emsp;记忆里清晰的只有学校的钟声，不时在我心底响起。</p>
<h2 id="西瓜与芝麻"><a href="#西瓜与芝麻" class="headerlink" title="西瓜与芝麻"></a><strong>西瓜与芝麻</strong></h2><p>&emsp;&emsp;想起这件事，是因为前几天的一篇热搜新闻，新闻是这样的：</p>
<blockquote>
<p>2019年第34届大赛获奖名单公布，云南省昆明市盘龙小学六年级学生陈某获大赛三等奖。</p>
<p>……</p>
<p>这位小学生研究项目名称叫《C10orf67在结直肠癌发生发展中的功能与机制研究》。</p>
<p>一般博士生研究需要做大量的前期工作，比如阅读大量国内外文献资料，并做好相关记录；同时要在实验室里反复实验；这个课题对实验室实验器材的要求也非常高，一般的科研单位的实验室还达不到做这个实验所需要的精度。总之，这样的研究，需要耗费相当大的时间、精力和物力。</p>
<p>有好多博士生读了多年书，做了无数次实验，也不一定能够获得理想的成果。可见这个科研项目难度之大，也可见这项成果的意义了。由此，博士生们岂能不自叹不如？看来再怎么努力都不如天赋啊。</p>
<p>天赋真的很关键？</p>
<p>……</p>
<p>有关方面介入调查，发现这位小学生的父母都在中科院昆明动物研究所工作，是中科院研究员；其父母曾发表过相关研究论文。</p>
<p><em>来源：腾讯网《小学六年级学生科研成果喜人，博士生自叹不如，天赋真的很关键？》</em></p>
<p><a href="https://new.qq.com/omn/20200715/20200715A0C6K600.html">https://new.qq.com/omn/20200715/20200715A0C6K600.html</a></p>
</blockquote>
<p>&emsp;&emsp;看到新闻，我立即想起了我读一年级的这件盗窃“大”案，和妻子讲了我们一年级的这件事。我对妻子说，真希望这孩子是又一个天才。希望这个孩子就是天赋异禀，6年级能做博士课题。怕就怕是另一种情况。</p>
<p>&emsp;&emsp;我怕他的父母，和他父母所提供给他的教育。</p>
<p>&emsp;&emsp;荒唐而不自知。</p>
<p>&emsp;&emsp;我怕他们没搞清楚一个问题：<strong>我们应当教孩子些什么？</strong></p>
<p>&emsp;&emsp;如果猜测成真，那么为了一个科技竞赛，让孩子轻视了“诚信”。天下有这么傻的父母吗？这不是捡了芝麻，丢了西瓜嘛！</p>
<p>&emsp;&emsp;相比之下，在我一年级的时候，为了让我们知道“偷”可耻，老师花一堂半的上课时间，来教我们诚信。教我们礼义廉耻，教我们做个好人。</p>
<p>&emsp;&emsp;或许那个清晨，太阳照常地将阳光普撒大地，炊烟在我们这个星球的许多角落照常升起。在偏僻小山村的一所学校里，有一位老师严肃又激动。老师很着急：他的学生不明白该如何做人，仿佛这老师当的是有多么失职！让我们晚明白几分钟，老师甚至也等不及。</p>
<p>&emsp;&emsp;那时候，“教书育人”还是一个词。</p>
<p>&emsp;&emsp;那时候，教书事小，育人事大。</p>
<h2 id="最后才是钢琴家"><a href="#最后才是钢琴家" class="headerlink" title="最后才是钢琴家"></a>最后才是钢琴家</h2><p>&emsp;&emsp;最近陆续看了几本书：《杀死一只知更鸟》、《白鹿原》、《傅雷家书》。</p>
<p>&emsp;&emsp;虽然是不同类型的书，但在看的过程中我一直在反思。反思自己该如何当一个爸爸，如何去教自己的孩子。</p>
<p>&emsp;&emsp;看完《白鹿原》已经一个多月了，很多故事已经模糊，但脑海中朱先生题给黑娃的四个字 ”学为好人“却一直清晰。你可以聪明、可以笨，可以当土匪可以入国共两军。但是朱先生最喜欢的不是“学为济世”或者“学为发财”，是“学为好人”。</p>
<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200908_fulei.jpg" alt="img"></p>
<p>&emsp;&emsp;《傅雷家书》几百封信，可以用代序中的两段来概括傅雷对傅聪的教育。（<em>我看的这个版本刚好没有这篇《代序》，这篇代序可以在本次推送的第二个位置看到</em>）</p>
<blockquote>
<p>把人格教育看做主要，把知识与技术的传授看做次要。<strong>童年时代与少年时代的教育重点，应当在伦理与道德方面</strong>，不能允许任何一桩生活琐事违反理性和最广义的做人之道；一切都以明辨是非，坚持真理，拥护正义，爱憎分明，守公德，守纪律，诚实不欺，质朴无华，勤劳耐苦为原则。</p>
<p>……</p>
<p>可是有一个基本原则，我始终觉得并不错误，就是：<strong>做人第一，其次才是做艺术家，再其次才是做音乐家，最后才是做钢琴家。</strong></p>
</blockquote>
<p>&emsp;&emsp;《傅雷家书》第一次看的时候还没有当爸爸。自己当了爸爸，真的在教自己的孩子的时候，再翻阅这本书和第一遍时感受完全不同。</p>
<p>&emsp;&emsp;这一遍读《傅雷家书》，我觉得似乎在这里能看明白：<strong>我们应该教孩子什么</strong>、以及什么是最重要的教育。</p>
<p>&emsp;&emsp;对于傅聪，最重要的教育不是钢琴。对于我们而言，我觉得也不是是汉字、拼音、英语、音乐、逻辑思维、Scratch等等课程。</p>
<p>&emsp;&emsp;但是很多人在育儿上很焦虑，包括妻子和我。</p>
<p>&emsp;&emsp;反思妻子与我对教育的焦虑，在拍一张照片的时候我突然想到了答案。</p>
<h2 id="一张大片的诞生"><a href="#一张大片的诞生" class="headerlink" title="一张大片的诞生"></a>一张大片的诞生</h2><p>&emsp;&emsp;前段时间我拍过一张照片：</p>
<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200908_waitan.jpg" alt="img"></p>
<p>&emsp;&emsp;拍完之后，我发给妻子，妻子丢给我一张大佬拍的外滩照片，说让我学习一下。</p>
<p>&emsp;&emsp;我开玩笑地回复妻子：</p>
<blockquote>
<p>这种大片，我现在可拍不出来。</p>
<p>这张照片我恰好知道，镜头是21999的新广角镜头+23999的相机拍摄的。</p>
<p>拍摄机位呢，是传说中的权贵机位，要花钱或者托关系才能过去拍的那种。</p>
<p>并且这个人在拍摄的时候，是双拍摄地点，四台相机一起拍摄的。</p>
<p>来，给点资金扶持一下我的爱好吧。</p>
</blockquote>
<p>&emsp;&emsp;我自己拍的不够好，并不是器材的原因。和妻子说的是玩笑话，但所讲内容却是事实。</p>
<p>&emsp;&emsp;我们看到的一张好照片，是按了一下快门捕捉下来的。但背后远超过简单的按下快门，是看不见的众多积累。</p>
<p>&emsp;&emsp;前一段时间总结了我认知中好照片应该怎么拍，贴在这里：</p>
<p><em>基础阶段：</em></p>
<ul>
<li><ol>
<li>学会最基础的摄影理论；看《纽摄》等几本基础的摄影理论书、构图思路。（~50小时）</li>
</ol>
</li>
<li><ol start="2">
<li>学会基础的后期修图（~50小时）</li>
</ol>
</li>
<li><ol start="3">
<li>有一个业余入门级的相机开始练习，并仔细阅读说明书。（~6000元+2小时）</li>
</ol>
</li>
<li><ol start="4">
<li>尽量多拍摄。</li>
</ol>
</li>
</ul>
<p><em>进阶阶段：</em></p>
<ul>
<li><ol start="5">
<li>更多的时间去学习进阶的摄影理论，打灯布光技巧，风光人物拍摄的不同，巧摄等摄影软件，日月地理知识。（≥200小时）</li>
</ol>
</li>
<li><ol start="6">
<li>更多的时间去学习研究大师的作品，图书馆借几十本感兴趣领域的大师摄影集，一张一张琢磨，一张一张分析，一张一张学习。（≥400小时）</li>
</ol>
</li>
<li><ol start="7">
<li>多拍摄，并花更多的时间去精进后期软件的技巧。（≥2小时×365×2）</li>
</ol>
</li>
</ul>
<p><em>高阶阶段：</em></p>
<ul>
<li><ol start="8">
<li>发现器材受到限制，升级器材。升级到满足你要求的（≥2个）相机和几个（昂贵的常用定焦）镜头。（≥20000元×4）</li>
</ol>
</li>
<li><ol start="9">
<li>更多的拍摄：每天相机不离身的拍拍拍，多实践。涉足商业拍摄，反压自己学习更深更多的细节。并与专业摄影师沟通反馈提升自己。</li>
</ol>
</li>
<li><ol start="10">
<li>发现自己的审美限制了修图思路和拍摄思路。（尝试）开发自己的审美天赋（但，可能永远开发不出来）</li>
</ol>
</li>
<li><ol start="11">
<li>去独特风景地拍摄，约漂亮模特拍高要求照片。力图创作独特的照片。</li>
</ol>
</li>
</ul>
<p>我学习摄影已接近一年，可能上面列的11条只是我个人的见解，不完全正确。但是学得越深入，我就越不自觉地思考下面几个问题：</p>
<ul>
<li><p>是人人都能拍出好照片吗？</p>
</li>
<li><p>是有了好器材+好机位就能拍出好照片吗？</p>
</li>
<li><p>是花了一万小时的训练就能拍出好照片吗？</p>
</li>
<li><p>是去冰岛拍极光、去亚马逊拍丛林就能让自己的照片脱颖而出吗？</p>
</li>
</ul>
<p>&emsp;&emsp;随着学习的深入，我发现答案都是”<strong>不</strong>“。</p>
<p>&emsp;&emsp;有的人审美有偏差，拍了10年照，拍出来的还是糖水片。有的人“基础阶段”还没过却直接在“高阶阶段”蹉跎时间，热衷器材、旅拍，摄影技术却终不见提高。</p>
<p>&emsp;&emsp;相同的问题，如果不是拍照，而是<strong>教育</strong>子女呢：</p>
<ul>
<li>人人都能考上好大学吗？</li>
<li>父母是博士硕士，孩子就能学习好吗？</li>
<li>每天花大量的时间做作业、做练习，考试分数就能高吗？</li>
<li>花大价钱买个学区房，或者一年15万的私立学校孩子就脱颖而出了吗？</li>
</ul>
<h2 id="数据看学霸"><a href="#数据看学霸" class="headerlink" title="数据看学霸"></a>数据看学霸</h2><p>&emsp;&emsp;问题很多，我们在这里考虑第一个问题：是人人都能<strong>学习好</strong>吗？</p>
<p>&emsp;&emsp;先罗列一组数据。</p>
<p>&emsp;&emsp;以我的孩子为例，我的宝宝是2014年出生，这一年上海有20.20万新生儿。</p>
<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200909_babies.JPG" alt="img"></p>
<p>（资料来源于网络：<a href="http://qianfanedu.cn/thread-128366-1-1.html%EF%BC%89">http://qianfanedu.cn/thread-128366-1-1.html）</a></p>
<p>&emsp;&emsp;而清北复交在上海的录取人数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200909_fudan_number.JPG" alt="img"></p>
<p>&emsp;&emsp;按照排位名次看高考录取投档线：</p>
<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200909_fudan_rank.JPG" alt="img"></p>
<p>（数据来源于网络，来源见水印或网址：<a href="https://www.zhihu.com/question/337872862/answer/769670292%EF%BC%89">https://www.zhihu.com/question/337872862/answer/769670292）</a></p>
<p>&emsp;&emsp;按照2019年的数据，以复旦为例，我的孩子需要<strong>考到上海市前1195名</strong>，才能考到我和妻子的学校。</p>
<p>&emsp;&emsp;从20.20万人中，突围到1000名左右，即使在差不多高考最容易的上海，**需要成绩在前0.5%**，很容易吗？</p>
<p>&emsp;&emsp;换一个角度：</p>
<ul>
<li>我的收入是在上海前0.5%吗？  不是</li>
<li>我的工作成绩是在公司前0.5%吗？  不是</li>
<li>我的财产是在上海前0.5%吗？  不是</li>
</ul>
<p>&emsp;&emsp;<strong>那凭什么我有信心，我的孩子能够在高考进入到上海的前0.5%呢</strong>？</p>
<p>&emsp;&emsp;有一句话说的不无道理：</p>
<p>&emsp;&emsp;<strong>中国教育的矛盾，是每个家长都认为自己孩子可以考第一名，和现实中每个班级只有一个第一名</strong>之间的矛盾。</p>
<p>&emsp;&emsp;在幼儿园，我们还可以批发奖状略以慰藉。</p>
<p>&emsp;&emsp;在教育培训市场，我们还可以批发各种等级证书来安慰家长。</p>
<p>&emsp;&emsp;但高考的时候不可以批发名校通知书。工作的时候不可以批发百万年薪。</p>
<p>&emsp;&emsp;<strong>那怎么办</strong>？</p>
<p>&emsp;&emsp;如果你真的在问自己“那怎么办”，那无解。</p>
<p>&emsp;&emsp;因为一个班40个人，只能有一个第一名。</p>
<p>&emsp;&emsp;因为上海20万新生儿，只能前0.5%有机会进入复旦。</p>
<p>&emsp;&emsp;这无解。</p>
<p>&emsp;&emsp;<strong>如果成功就是在40个人的班级中，考得第一名，那么我们的教育将是1个人的成功和39个人的失败</strong>。</p>
<p>&emsp;&emsp;如果所有的父母都这么想，我们就会有39对焦虑的家长。</p>
<p>&emsp;&emsp;从拍一张好照片去看这个问题，或许能有不同的理解。</p>
<h2 id="大片-v-s-照片"><a href="#大片-v-s-照片" class="headerlink" title="大片 v.s. 照片"></a>大片 v.s. 照片</h2><p>&emsp;&emsp;回去翻看一下本文第四节《一张大片的诞生》，把“拍出大片”，替换成”考第一名“看看？</p>
<p>&emsp;&emsp;看完是不是有一点沮丧？</p>
<p>&emsp;&emsp;不要觉得悲伤，一如我对摄影的态度。</p>
<p>&emsp;&emsp;在摄影上，我并没有拍出极致大片，但我并不难过。</p>
<p>&emsp;&emsp;因为我清楚自己的实力，明白现在的我拍不出这样的极致大片。我工作繁忙，并不能有如此多的时间进行摄影训练。我“审美”受限，我对美的理解甚至是天生的愚钝，和天才沾不上边&emsp;&emsp;——<strong>或许我一辈子都拍不出一张惊艳的照片</strong>。</p>
<p>&emsp;&emsp;<strong>但是那又怎样呢？</strong></p>
<p>&emsp;&emsp;我可以记录我的孩子的笑脸，我可以拍我的妻子对我的爱，我可以拍我对家乡的思念。我可以拍我认为美的东西，并且持续去追求美的东西。我有我自己的价值。</p>
<p>&emsp;&emsp;摄影，不是只有“大片”才叫做照片。</p>
<p>&emsp;&emsp;<strong>学习，不是只有“第一名”才叫成功</strong>。</p>
<p>&emsp;&emsp;尽己所能的发现美并记录美，并不叫失败。</p>
<p>&emsp;&emsp;我依然热爱摄影，并持续去精进自己的摄影水平。</p>
<p>&emsp;&emsp;<strong>或许对于教育，我们也应如此。</strong></p>
<p>&emsp;&emsp;父母克制自己“望子成龙”的欲望，接纳孩子在学习上的不完美、接受学习上可能考不了第一名的事实。</p>
<p>&emsp;&emsp;孩子可能不是万里挑一的“大片”，但是可以是一张“好照片”。</p>
<p>&emsp;&emsp;教会他们孝顺。</p>
<p>&emsp;&emsp;教会他们爱国。</p>
<p>&emsp;&emsp;教会他们诚信。</p>
<p>&emsp;&emsp;教会他们终身学习。</p>
<p>&emsp;&emsp;教他们接纳别人会比自己优秀。教他们接纳自己并不完美。</p>
<p>&emsp;&emsp;这些教育并不花很多时间，犹如摄影学习中的”基础阶段“。你可以学不到那唯一的“第一名”，但是你可以学成不唯一的一个好人。</p>
<p>&emsp;&emsp;在职场上，尽力做一位对公司有贡献的好员工。</p>
<p>&emsp;&emsp;在朋友中，做一个可信赖的人。</p>
<p>&emsp;&emsp;在家庭中，做一个好父母、好子女、好丈夫、好妻子。</p>
<p>&emsp;&emsp;尽心尽力，<strong>做个好人</strong>。</p>
<p>&emsp;&emsp;本来我们就可以付出比“进阶阶段”和“高阶阶段”更少的时间和金钱，去拍出一张<strong>好照片</strong>，而不是去堆砌器材与四处旅拍。</p>
<p>&emsp;&emsp;或许这才是我们应该首先教给孩子的东西。</p>
<hr>
<p> 本文首发自个人原创公众号：<a href="https://mp.weixin.qq.com/s/18-3I1JYIAsM3Zhs07__4g">大东山谷</a>，欢迎关注，未经本人许可，禁止转载。</p>
]]></content>
      <tags>
        <tag>大东山谷精选</tag>
      </tags>
  </entry>
  <entry>
    <title>握手协议（pvld/prdy或者valid-ready或AXI）中ready打拍技巧</title>
    <url>/2020/09/07/axi-ready-pipe/</url>
    <content><![CDATA[<h2 id="内容提要"><a href="#内容提要" class="headerlink" title="内容提要"></a>内容提要</h2><ul>
<li>ready打拍的问题</li>
<li>用FIFO的思路去解决</li>
<li>用Buffer的思路去解决</li>
</ul>
<h2 id="问题提出：ready时序如何优化？"><a href="#问题提出：ready时序如何优化？" class="headerlink" title="问题提出：ready时序如何优化？"></a>问题提出：ready时序如何优化？</h2><p>在valid/ready 握手协议中，valid 与 data的时序优化比较容易理解，（不熟悉valid/ready协议或者valid打拍方法的）大家可以参考上次推送（<a href="http://mp.weixin.qq.com/s?__biz=MzIxMjg2ODQxMw==&mid=2247483672&idx=1&sn=62a940a7ec6d84a7da991ab14f4e1d7c&chksm=97becd4aa0c9445cefdab5bb3ec7f8c6400e7ef9702f6369ab88924a5cba118e122a07b17d16&scene=21#wechat_redirect">握手协议（pvld/prdy或者valid-ready或AXI）中Valid及data打拍技巧</a>）。<br>但是有时候，关键路径是在ready信号上，如何对ready信号打拍呢？</p>
<p>首先将把目标设计想象成一个黑盒子,如图1所示，我们的目标是将READY_DOWN通过打拍的方法获得时序优化。</p>
<a id="more"></a>

<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200907_black_box.JPG" alt="img"></p>
<p>（图1）</p>
<h2 id="尝试直接对ready打一拍"><a href="#尝试直接对ready打一拍" class="headerlink" title="尝试直接对ready打一拍"></a>尝试直接对ready打一拍</h2><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">READY_UP &lt;= READY_DOWN;</span><br><span class="line">VALID_DOWN = valid_up;</span><br></pre></td></tr></table></figure>

<p><em>（仅示例，非verilog代码。下同）</em></p>
<p>这样是行不通的。</p>
<p>一个简单的例子（case 1）就是你让READY_DOWN像一个时钟一个，间隔一个cycle起来一次，那么VALID_UP &amp;&amp; READY_UP 与 VALID_DOWN &amp;&amp; READY_DOWN无法同步，数据无法传输下去。</p>
<h2 id="思路：将其分解成两个interfaces"><a href="#思路：将其分解成两个interfaces" class="headerlink" title="思路：将其分解成两个interfaces"></a>思路：将其分解成两个interfaces</h2><p>将ready打拍的逻辑想象成一个黑盒子，去分析这个黑盒子的设计，分为up interface 和down interface将问题细化：</p>
<ul>
<li>up interface 有VALID_UP, DATA_UP, READY_UP</li>
<li>down interface 有VALID_DOWN, DATA_DOWN, READY_DOWN<br>可以总结成下面的样子：</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">READY_UP &lt;= READY_DOWN; <span class="comment">//or READY_UP = function(READY_DOWN_next);</span></span><br><span class="line">transfer_up = VALID_UP &amp;&amp; READY_UP;</span><br><span class="line">transfer_down = VALID_DOWN &amp;&amp; READY_DOWN;</span><br></pre></td></tr></table></figure>

<p>如果去解决刚才例子（case 1）,那么这个黑盒子：</p>
<blockquote>
<p>当READY_UP为高的时候，可以接受数据;<br>当READY_DOWN为高的时候，<strong>如果我们有数据可发的话</strong>，我们可以向downstream发送数据;</p>
</blockquote>
<p>是不是很像一个FIFO？</p>
<h1 id="用FIFO去解决"><a href="#用FIFO去解决" class="headerlink" title="用FIFO去解决"></a>用FIFO去解决</h1><p>将一个FIFO插在黑盒子这里，那么就会变成这样子：</p>
<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200907_black_box_fifo.JPG" alt="img"></p>
<p>（图2）</p>
<blockquote>
<p>VALID_UP/READ_YUP ==&gt; FIFO ==&gt; VALID_DOWN/READY_DOWN</p>
</blockquote>
<p>也就是:</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">VALID_UP = fifo_push_valid;</span><br><span class="line">READY_UP = fifo_push_ready;</span><br><span class="line">VALID_DOWN = fifo_pop_valid;READY_DOWN = fifo_pop_ready;</span><br></pre></td></tr></table></figure>

<p>现在问题变成了：<em>如何设计这个FIFO呢？</em></p>
<ul>
<li>这个FIFO深度多少？</li>
<li>怎么设计，能够保证READY_UP是READY_DOWN打过一拍的呢？</li>
</ul>
<h2 id="FIFO设计多深？"><a href="#FIFO设计多深？" class="headerlink" title="FIFO设计多深？"></a>FIFO设计多深？</h2><p>因为本身valid/ready协议是<strong>反压协议</strong>(<em>也就是READY_UP为0的时候，不会写FIFO，而不会导致FIFO溢出</em>)而且此处的读写时钟是同一个时钟，是一个同步FIFO，所以FIFO深度是1或者2就足够了。</p>
<p>深度是1还是2要看极端情况下需要存储几笔数据。</p>
<p>简单分析可以知道，只有一种情况会去向FIFO中存储数据：</p>
<ul>
<li>READY_UP是1，可以从upstream接收数据</li>
<li>同时READY_DOWN是0，不可以向downstream发送数据</li>
</ul>
<p>这种情况在极端情况下最多维持多久呢？<br><strong>答案是：一个周期</strong></p>
<hr>
<p>因为如果cycle <em>a</em> 时：READY_DOWN=0,那么cycle <em>a+1</em>时，READY_UP变为0了，开始反压，所以只用存一个数就够了。</p>
<p>所以设计为一个深度为1的FIFO就可以了。</p>
<p>深度为1的FIFO有很多特点，设计起来比较简单。比如：wr_ptr/rd_ptr始终指向地址0，所以我们可以删掉wr_ptr和rd_ptr，因为是一个常值0。</p>
<h2 id="简单的depth-1-FIFO实现"><a href="#简单的depth-1-FIFO实现" class="headerlink" title="简单的depth-1 FIFO实现"></a>简单的depth-1 FIFO实现</h2><p>使用depth-1 FIFO传输数据，可以这样设计：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Depth 1 FIFO.</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)<span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span>(RESET)     <span class="keyword">begin</span>    </span><br><span class="line">	fifo_line_valid &lt;= <span class="number">0</span>;    </span><br><span class="line">	fifo_push_ready &lt;= <span class="number">1&#x27;b0</span>;    </span><br><span class="line">	fifo_data &lt;= &#123;WIDTH&#123;<span class="number">1&#x27;b0</span>&#125;&#125;;    </span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span>	<span class="keyword">begin</span></span><br><span class="line">    fifo_push_ready &lt;= fifo_pop_ready;</span><br><span class="line">    	<span class="keyword">if</span> (fifo_push_ready) <span class="keyword">begin</span></span><br><span class="line">    		fifo_line_valid &lt;= fifo_push_valid;</span><br><span class="line">    		fifo_data &lt;= DATA_UP;</span><br><span class="line">    		<span class="keyword">end</span></span><br><span class="line">    	<span class="keyword">else</span>	<span class="keyword">begin</span></span><br><span class="line">        	<span class="keyword">if</span> (fifo_pop_valid &amp;&amp; fifo_pop_ready)</span><br><span class="line">                fifo_line_valid &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            	fifo_line_valid &lt;= fifo_line_valid;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> fifo_push_valid = VALID_UP;</span><br><span class="line"><span class="keyword">assign</span> fifo_pop_valid = fifo_line_valid;</span><br><span class="line"><span class="keyword">assign</span> fifo_pop_ready = READY_DOWN;</span><br><span class="line"><span class="keyword">assign</span> READY_UP = fifo_push_ready;</span><br><span class="line"><span class="keyword">assign</span> VALID_DOWN = fifo_line_valid;</span><br><span class="line"><span class="keyword">assign</span> DATA_DOWN = fifo_data;</span><br></pre></td></tr></table></figure>

<p>这解决了READY打拍的问题。但是这里有一些可以改进的地方，比如：</p>
<ul>
<li>是不是可以挤掉多于的气泡？</li>
<li>在FIFO为空的时候，数据是不是可以直接bypass FIFO？</li>
</ul>
<h2 id="无气泡传输"><a href="#无气泡传输" class="headerlink" title="无气泡传输"></a>无气泡传输</h2><p>关于无气泡传输，可以参考上一篇推送（<a href="http://mp.weixin.qq.com/s?__biz=MzIxMjg2ODQxMw==&mid=2247483672&idx=1&sn=62a940a7ec6d84a7da991ab14f4e1d7c&chksm=97becd4aa0c9445cefdab5bb3ec7f8c6400e7ef9702f6369ab88924a5cba118e122a07b17d16&scene=21#wechat_redirect"><em>握手协议（pvld/prdy或者valid-ready或AXI）中Valid及data打拍技巧</em></a>）。具体的说，就是既然你这里有个深度为1的FIFO了，那么我是不是可以利用起来，放点数据啊……</p>
<p>当READY_DOWN持续是0的时候，READY_UP依然可以有一个cycle去接收一笔数据，把FIFO资源利用起来：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">fifo_no_push = ~(fifo_push_valid &amp;&amp; fifo_push_ready);</span><br><span class="line">fifo_push_ready &lt;= (fifo_pop_ready||(fifo_no_push &amp;&amp; ~fifo_line_valid));</span><br></pre></td></tr></table></figure>

<p>同样的原因，在RESET情况下，READY_UP可以为1，可以将复位值修改。<br>那么FIFO穿越呢？</p>
<h2 id="FIFO穿越"><a href="#FIFO穿越" class="headerlink" title="FIFO穿越"></a>FIFO穿越</h2><p>考虑一个特殊情况(case 2)：</p>
<p><em>假设READY_DOWN在复位之后始终为1，</em></p>
<p><em>然后某个时刻开始VALID_UP为1了。</em></p>
<p>是不是每个周期，数据都可以直接传下来而不用进入FIFO，即使READY_DOWN打过一拍？</p>
<p>换句话说：**<em>如果READY_UP=1, READY_DOWN=1, FIFO是空的这种情况下，数据可以直通**</em>。</p>
<ul>
<li>上文特殊情况(case 2)，READY_DOWN/READY_UP一直是1，显然可以。</li>
<li>READY_UP从0到1的跳变：READY_DOWN也会在前一周期有一个从0到1的跳变。在READY_DOWN为0时，有一笔数据存到FIFO里边（无气泡传输）；当READY_DOWN在时刻<em>a</em>从0变到1时，READY_UP在时刻<em>a+1</em>也会从0变为1。如果此时READY_DOWN也为1，可以直通，不用进入FIFO。也就是：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assign pass_through &#x3D; READY_UP &amp;&amp; READY_DOWN &amp;&amp; ~fifo_line_valid;</span><br><span class="line">assign VALID_DOWN &#x3D; pass_through ? VALID_UP : fifo_line_valid;</span><br><span class="line">assign DATA_DOWN &#x3D; pass_through ? DATA_UP : fifo_data;</span><br></pre></td></tr></table></figure>

<p>注意在直通时，我们不希望数据进入FIFO：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assign fifo_push_valid &#x3D; ~pass_through &amp;&amp; VALID_UP;</span><br></pre></td></tr></table></figure>

<h2 id="将所有这些结合起来："><a href="#将所有这些结合起来：" class="headerlink" title="将所有这些结合起来："></a>将所有这些结合起来：</h2><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">// File Name   : ready_flop.v</span></span><br><span class="line"><span class="comment">// Author      : Xiangzhi Meng</span></span><br><span class="line"><span class="comment">// Date        : 2020-06-06</span></span><br><span class="line"><span class="comment">// Version     : 0.1</span></span><br><span class="line"><span class="comment">// Description :</span></span><br><span class="line"><span class="comment">// 1. ready_flop using one depth-1 FIFO to hold data.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// All rights reserved.</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/1ns</span></span><br><span class="line"><span class="keyword">module</span> ready_flop</span><br><span class="line">	(</span><br><span class="line">	CLK,</span><br><span class="line">    RESET,</span><br><span class="line">    VALID_UP,</span><br><span class="line">    READY_UP,</span><br><span class="line">    DATA_UP,</span><br><span class="line">    VALID_DOWN,</span><br><span class="line">    READY_DOWN,</span><br><span class="line">    DATA_DOWN</span><br><span class="line">    );</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">parameter</span> WIDTH            = <span class="number">32</span>;</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">input</span>                      CLK;</span><br><span class="line"><span class="keyword">input</span>                      RESET;</span><br><span class="line"><span class="comment">//Up stream</span></span><br><span class="line"><span class="keyword">input</span>                      VALID_UP;</span><br><span class="line"><span class="keyword">output</span>                     READY_UP;</span><br><span class="line"><span class="keyword">input</span>  [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_UP;</span><br><span class="line"><span class="comment">//Down Stream</span></span><br><span class="line"><span class="keyword">output</span>                     VALID_DOWN;</span><br><span class="line"><span class="keyword">input</span>                      READY_DOWN;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_DOWN;</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">wire</span>                       CLK;</span><br><span class="line"><span class="keyword">wire</span>                       RESET;</span><br><span class="line"><span class="comment">//Up stream</span></span><br><span class="line"><span class="keyword">wire</span>                       VALID_UP;</span><br><span class="line"><span class="keyword">wire</span>                       READY_UP;</span><br><span class="line"><span class="keyword">wire</span>   [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_UP;</span><br><span class="line"><span class="comment">//Down Stream</span></span><br><span class="line"><span class="keyword">wire</span>                       VALID_DOWN;</span><br><span class="line"><span class="keyword">wire</span>                       READY_DOWN;</span><br><span class="line"><span class="keyword">wire</span>   [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_DOWN;</span><br><span class="line"><span class="keyword">reg</span>                        fifo_line_valid;</span><br><span class="line"><span class="keyword">wire</span>                       fifo_push_valid;</span><br><span class="line"><span class="keyword">reg</span>                        fifo_push_ready;</span><br><span class="line"><span class="keyword">wire</span>                       fifo_pop_ready;</span><br><span class="line"><span class="keyword">wire</span>                       fifo_no_push;</span><br><span class="line"><span class="keyword">wire</span>                       pass_through;</span><br><span class="line"><span class="keyword">wire</span>                       fifo_pop_valid;</span><br><span class="line"><span class="keyword">reg</span>    [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         fifo_data;</span><br><span class="line"><span class="comment">// Depth 1 FIFO.</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)	<span class="keyword">begin</span>    </span><br><span class="line">	<span class="keyword">if</span>(RESET)    <span class="keyword">begin</span>    </span><br><span class="line">		fifo_line_valid &lt;= <span class="number">0</span>;</span><br><span class="line">		fifo_push_ready &lt;= <span class="number">1&#x27;b1</span>;    </span><br><span class="line">		fifo_data &lt;= &#123;WIDTH&#123;<span class="number">1&#x27;b0</span>&#125;&#125;;    </span><br><span class="line">		<span class="keyword">end</span>    </span><br><span class="line">	<span class="keyword">else</span>	<span class="keyword">begin</span></span><br><span class="line">		fifo_push_ready &lt;= (fifo_pop_ready||(fifo_no_push &amp;&amp; ~fifo_line_valid));</span><br><span class="line">		<span class="comment">//Bubble clampping: If last cycle there&#x27;s no FIFO push and</span></span><br><span class="line">		<span class="comment">//fifo_line is empty,it can be ready.</span></span><br><span class="line">		<span class="keyword">if</span> (fifo_push_ready)        <span class="keyword">begin</span>            </span><br><span class="line">			fifo_line_valid &lt;= fifo_push_valid;            </span><br><span class="line">			fifo_data &lt;= DATA_UP;        </span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span>	<span class="keyword">begin</span>            </span><br><span class="line">			<span class="keyword">if</span> (fifo_pop_valid &amp;&amp; fifo_pop_ready)</span><br><span class="line">				fifo_line_valid &lt;= <span class="number">1&#x27;b0</span>;            </span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				fifo_line_valid &lt;= fifo_line_valid;        </span><br><span class="line">		<span class="keyword">end</span>    </span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> fifo_no_push = ~(fifo_push_valid &amp;&amp; fifo_push_ready);</span><br><span class="line"><span class="keyword">assign</span> pass_through = READY_UP &amp;&amp; READY_DOWN &amp;&amp; ~fifo_line_valid;</span><br><span class="line"><span class="keyword">assign</span> fifo_push_valid = ~pass_through &amp;&amp; VALID_UP;</span><br><span class="line"><span class="keyword">assign</span> fifo_pop_valid = fifo_line_valid;</span><br><span class="line"><span class="keyword">assign</span> fifo_pop_ready = READY_DOWN;</span><br><span class="line"><span class="keyword">assign</span> READY_UP = fifo_push_ready;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bypass</span></span><br><span class="line"><span class="keyword">assign</span> VALID_DOWN = pass_through ? VALID_UP : fifo_line_valid;</span><br><span class="line"><span class="keyword">assign</span> DATA_DOWN = pass_through ? DATA_UP : fifo_data;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p><em>(注：代码未经详细验证)</em></p>
<h2 id="换一种思路"><a href="#换一种思路" class="headerlink" title="换一种思路"></a>换一种思路</h2><p>经过上面对FIFO的分析，我们可以总结起来，主要是以下几点：</p>
<ul>
<li>加入一个深度为1的同步FIFO，这个FIFO在READY_DOWN为0,且READY_UP为1时暂存一个数据；</li>
<li>在READY_DOWN从0-&gt;1时，FIFO里边的数据先输出到下级；</li>
<li>如果READY_DOWN继续为1，数据可以绕过FIFO直通；</li>
</ul>
<p>深度为1的FIFO（不管是同步还是异步FIFO），都是一个特殊的逻辑单元。</p>
<p>对于深度为1的同步FIFO，其实就是一拍寄存器打拍。<br>所以，我们可以这样重新设计：</p>
<ol>
<li>加一级寄存器作为buffer（实际上就是深度为1的FIFO）</li>
<li>当以下条件满足，这一级寄存器会暂存一级数据：<br>2.1 READY_DOWN是0，并且<br>2.2 READY_UP是1,并且<br>2.3 VALID_UP是1;</li>
</ol>
<p>也就是：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assign</span> store_data = VALID_UP &amp;&amp; READY_UP &amp;&amp; ~READY_DOWN;</span><br></pre></td></tr></table></figure>

<ol>
<li>当READY_UP是1时,数据可以直接<em>暴露</em>在下级接口：READY_UP为1时，BUFFER中一定是空的，因为上一个时钟周期数据已经排空了。也就是:</li>
</ol>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assign</span> VALID_DOWN = READY_UP ? VALID_UP : buffer_valid;</span><br></pre></td></tr></table></figure>

<p>这其实就是上面的FIFO直通模式。同样我们可以挤掉气泡：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">READY_UP &lt;= READY_DOWN || ((~buffer_valid) &amp;&amp; (~store_data)); </span><br></pre></td></tr></table></figure>

<p>把这所有的总结起来：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">// File Name   : ready_flop.v</span></span><br><span class="line"><span class="comment">// Author      : Xiangzhi Meng</span></span><br><span class="line"><span class="comment">// Date        : 2020-06-06</span></span><br><span class="line"><span class="comment">// Version     : 0.1</span></span><br><span class="line"><span class="comment">// Description :</span></span><br><span class="line"><span class="comment">// 1. ready_flop using one buffer to hold data.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// All rights reserved.</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/1ns</span></span><br><span class="line"><span class="keyword">module</span> ready_flop        </span><br><span class="line">	(</span><br><span class="line">    CLK,</span><br><span class="line">    RESET,</span><br><span class="line">    VALID_UP,</span><br><span class="line">    READY_UP,</span><br><span class="line">    DATA_UP,</span><br><span class="line">    VALID_DOWN,</span><br><span class="line">    READY_DOWN,</span><br><span class="line">    DATA_DOWN</span><br><span class="line">    );</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">parameter</span> WIDTH            = <span class="number">32</span>;</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">input</span>                      CLK;</span><br><span class="line"><span class="keyword">input</span>                      RESET;</span><br><span class="line"><span class="comment">//Up stream</span></span><br><span class="line"><span class="keyword">input</span>                      VALID_UP;</span><br><span class="line"><span class="keyword">output</span>                     READY_UP;</span><br><span class="line"><span class="keyword">input</span>  [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_UP;</span><br><span class="line"><span class="comment">//Down Stream</span></span><br><span class="line"><span class="keyword">output</span>                     VALID_DOWN;</span><br><span class="line"><span class="keyword">input</span>                      READY_DOWN;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_DOWN;</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">wire</span>                       CLK;</span><br><span class="line"><span class="keyword">wire</span>                       RESET;</span><br><span class="line"><span class="comment">//Up stream</span></span><br><span class="line"><span class="keyword">wire</span>                       VALID_UP;</span><br><span class="line"><span class="keyword">reg</span>                        READY_UP;</span><br><span class="line"><span class="keyword">wire</span>   [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_UP;</span><br><span class="line"><span class="comment">//Down Stream</span></span><br><span class="line"><span class="keyword">wire</span>                       VALID_DOWN;</span><br><span class="line"><span class="keyword">wire</span>                       READY_DOWN;</span><br><span class="line"><span class="keyword">wire</span>   [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         DATA_DOWN;</span><br><span class="line"><span class="keyword">wire</span>                       store_data;</span><br><span class="line"><span class="keyword">reg</span>    [<span class="number">0</span>:WIDTH-<span class="number">1</span>]         buffered_data;</span><br><span class="line"><span class="keyword">reg</span>                        buffer_valid;</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">//buffer.</span></span><br><span class="line"><span class="keyword">assign</span> store_data = VALID_UP &amp;&amp; READY_UP &amp;&amp; ~READY_DOWN;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">	<span class="keyword">if</span> (RESET)  buffer_valid &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">	<span class="keyword">else</span>        buffer_valid &lt;= buffer_valid ? ~READY_DOWN: store_data;</span><br><span class="line"><span class="comment">//Note: If now buffer has data, then next valid would be ~READY_DOWN:   </span></span><br><span class="line"><span class="comment">//If downstream is ready, next cycle will be un-valid.    </span></span><br><span class="line"><span class="comment">//If downstream is not ready, keeping high. </span></span><br><span class="line"><span class="comment">// If now buffer has no data, then next valid would be store_data, 1 for store;</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK)</span><br><span class="line">	<span class="keyword">if</span> (RESET)  buffered_data &lt;= &#123;WIDTH&#123;<span class="number">1&#x27;b0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">else</span>        buffered_data &lt;= store_data ? DATA_UP : buffered_data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> CLK) <span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (RESET)  READY_UP &lt;= <span class="number">1&#x27;b1</span>; <span class="comment">//Reset can be 1.</span></span><br><span class="line">	<span class="keyword">else</span>        READY_UP &lt;= READY_DOWN || ((~buffer_valid) &amp;&amp; (~store_data)); <span class="comment">//Bubule clampping</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="comment">//Downstream valid and data.</span></span><br><span class="line"><span class="comment">//Bypass</span></span><br><span class="line"><span class="keyword">assign</span> VALID_DOWN = READY_UP? VALID_UP : buffer_valid;</span><br><span class="line"><span class="keyword">assign</span> DATA_DOWN  = READY_UP? DATA_UP  : buffered_data;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<p><em>(注：代码未经详细验证)</em></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li>我在电脑上简单跑了两个波形，FIFO方法和Buffer方法结果是一样的。</li>
<li>用FIFO去隔离开上下两个interface思考，比较容易想明白。</li>
<li>无气泡传输、FIFO直通这两个小feature拿掉，也可以工作、也是能实现READY_DOWN时序优化的设计目标的。</li>
</ol>
<hr>
<p>电路设计心得，欢迎关注“数字逻辑电路小站”公众号</p>
]]></content>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>握手协议（pvld/prdy或者valid-ready或AXI）中Valid及data打拍技巧</title>
    <url>/2020/09/07/axi-valid-pipe/</url>
    <content><![CDATA[<h2 id="内容提要"><a href="#内容提要" class="headerlink" title="内容提要"></a>内容提要</h2><ul>
<li>valid 与data 的时序修复时的打拍</li>
<li>如何无气泡？</li>
<li>预告：ready修复</li>
</ul>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>AXI 协议使用的是valid-ready握手的方式去传输数据。关于valid ready 握手，有几个要点：</p>
<ul>
<li><p>数据data使用valid作为有效性指示。当valid为1是，data数据才有效。</p>
</li>
<li><p>valid和ready信号同时为高时，数据传输真正发生。</p>
</li>
<li><p>valid在没有ready到来的情况下，不能自己变为0。也就是，数据没有处理，必须一直等待。</p>
</li>
<li><p>ready表征下一级是否准备好。ready信号可以随时起来，随时下去。</p>
</li>
</ul>
<a id="more"></a>

<p><img src="https://cdn.jsdelivr.net/gh/dadongshangu/CDN@master/images/20200907_valid_ready.JPG" alt="valid_ready"></p>
<h2 id="valid与data的时序修复"><a href="#valid与data的时序修复" class="headerlink" title="valid与data的时序修复"></a>valid与data的时序修复</h2><p>对于valid 跟data的时序问题，比较好修，这也是pipeline机制中，最常见的修timing的方法：打一拍。所有的打一拍，都可以抽象为valid-ready data 模型。在这个模型中。valid 和data需要打一拍，改善时序。</p>
<h3 id="最常见的修复方法"><a href="#最常见的修复方法" class="headerlink" title="最常见的修复方法"></a>最常见的修复方法</h3><p>valid在握手的情况下，打一拍，传到下级，不握手的情况下，维持原值。data数据一样。对于ready则是直接传过去即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VALID_DOWN &lt;&#x3D; handshake ? VALID_UP : VALID_DOWN         ;</span><br><span class="line">DATA_DOWN  &lt;&#x3D; handshake ? DATA_UP : DATA_DOWN           ;</span><br><span class="line">READY_UP    &#x3D; READY_DOWN                                ;</span><br></pre></td></tr></table></figure>

<h3 id="进行修改——简化"><a href="#进行修改——简化" class="headerlink" title="进行修改——简化"></a>进行修改——简化</h3><p>对其进行修改，可以发现逻辑进行简化：valid的逻辑，在传输的时候，可以直接使用ready_up。也就是，ready_up是1的时候，你可以传。也就是变为如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VALID_DOWN &lt;&#x3D; READY_UP  ? VALID_UP : VALID_DOWN         ;</span><br><span class="line">DATA_DOWN  &lt;&#x3D; handshake ? DATA_UP : DATA_DOWN           ;</span><br><span class="line">READY_UP    &#x3D; READY_DOWN                                ;</span><br></pre></td></tr></table></figure>

<h3 id="进行修改——无气泡传输"><a href="#进行修改——无气泡传输" class="headerlink" title="进行修改——无气泡传输"></a>进行修改——无气泡传输</h3><p>对其继续进行修改，可以发现现在的电路，已经存在了一级寄存器。这一级寄存器，可以给上一级的data，多提供一级存储。也就是说，就算是下级ready是0，只要寄存器里边没有数，上一级仍然可以ready为高，将数据存储一拍。本质上就是消除了一级气泡。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VALID_DOWN &lt;&#x3D; READY_UP  ? VALID_UP : VALID_DOWN         ;</span><br><span class="line">DATA_DOWN  &lt;&#x3D; handshake ? DATA_UP : DATA_DOWN           ;</span><br><span class="line">assign READY_UP &#x3D; READY_DOWN || ~VALID_DOWN             ;</span><br></pre></td></tr></table></figure>

<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>这是最常用的一个valid打拍的情况。详细示例代码如下，仅供参考：</p>
<p>(p.s.：本代码为业余时间作为个人兴趣写的代码，未经严谨验证，仅供原型原理说明，可复制粘贴使用，但不承诺准确性。)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module valid_flop</span><br><span class="line">        (</span><br><span class="line">        CLK                                                                     ,</span><br><span class="line">        RESET                                                                   ,</span><br><span class="line">        VALID_UP                                                                ,</span><br><span class="line">        READY_UP                                                                ,</span><br><span class="line">        DATA_UP                                                                 ,</span><br><span class="line">        VALID_DOWN                                                              ,</span><br><span class="line">        READY_DOWN                                                              ,</span><br><span class="line">        DATA_DOWN</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">parameter WIDTH            &#x3D; 32                                                 ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">input                      CLK                                                  ;</span><br><span class="line">input                      RESET                                                ;</span><br><span class="line">input                      VALID_UP                                             ;</span><br><span class="line">output                     READY_UP                                             ;</span><br><span class="line">input  [WIDTH-1:0]         DATA_UP                                              ;</span><br><span class="line">output                     VALID_DOWN                                           ;</span><br><span class="line">input                      READY_DOWN                                           ;</span><br><span class="line">output [WIDTH-1:0]         DATA_DOWN                                            ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">wire                       CLK                                                  ;</span><br><span class="line">wire                       RESET                                                ;</span><br><span class="line">wire                       VALID_UP                                             ;</span><br><span class="line">wire                       READY_UP                                             ;</span><br><span class="line">wire   [WIDTH-1:0]         DATA_UP                                              ;</span><br><span class="line">&#x2F;&#x2F;Down Stream</span><br><span class="line">reg                        VALID_DOWN                                           ;</span><br><span class="line">wire                       READY_DOWN                                           ;</span><br><span class="line">reg    [WIDTH-1:0]         DATA_DOWN                                            ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F;Valid</span><br><span class="line">always @(posedge CLK)</span><br><span class="line">if (RESET)  VALID_DOWN &lt;&#x3D; 1&#39;b0                                                  ;</span><br><span class="line">else        VALID_DOWN &lt;&#x3D; READY_UP ? VALID_UP : VALID_DOWN                      ;</span><br><span class="line">&#x2F;&#x2F;Data</span><br><span class="line">always @(posedge CLK)</span><br><span class="line">if (RESET)  DATA_DOWN &lt;&#x3D; &#123;WIDTH&#123;1&#39;b0&#125;&#125;                                          ;</span><br><span class="line">else        DATA_DOWN &lt;&#x3D; (READY_UP &amp;&amp; VALID_UP) ? DATA_UP : DATA_DOWN           ;</span><br><span class="line">&#x2F;&#x2F;READY with buble collapsing.</span><br><span class="line">assign READY_UP &#x3D; READY_DOWN || ~VALID_DOWN                                     ;</span><br><span class="line">&#x2F;&#x2F;READY with no buble collapsing.</span><br><span class="line">&#x2F;&#x2F;assign READY_UP &#x3D; READY_DOWN                                                  ;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h3 id="模型变化"><a href="#模型变化" class="headerlink" title="模型变化"></a>模型变化</h3><p>上面的模型可以有很多变化，比如一种协议，不存在反压，或者说只有valid 和data，数据总是可以发送的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VALID_DOWN &lt;&#x3D; VALID_UP        							;</span><br><span class="line">DATA_DOWN  &lt;&#x3D; VALID_UP ? DATA_UP : DATA_DOWN            ;</span><br><span class="line">valid only_no_data模型</span><br></pre></td></tr></table></figure>

<p>上面的模型继续变化，比如只有control信号，没有数据(data)。就简化成直接打一拍了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VALID_DOWN &lt;&#x3D; VALID_UP        							;</span><br></pre></td></tr></table></figure>

<h2 id="下节预告"><a href="#下节预告" class="headerlink" title="下节预告"></a>下节预告</h2><p>valid ready 协议中对ready进行timing 修复打拍的方法。</p>
]]></content>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
</search>
